#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Edspert_sht20.h>
#include <EdspertPubSub.h>
#include <LDR.h>
#include <ArduinoJson.h>

//====== JSON Declaration ======//
StaticJsonDocument<200> doc;
String jsonString, jsonPayload;

//====== Connection Declaration ======//
// Wifi Setting
char* ssid = "NAMA_WIFI";
char* password = "PASSWORD_WIFI";

// Broker Setting
String MQTTUser = "";
String MQTTPass = "";

// MQTT Setting
char *mqttServer = "broker.emqx.io";
int mqttPort = 1883;
String myClientID = "Device1";
String Topic_1 = "edspert/data/temp";
String Topic_2 = "edspert/data/hum";
String Topic_3 = "edspert/data/inten";
String Topic_4 = "edspert/data/soil";
String Topic_5 = "edspert/data/distance";

String Topic = "edspert/data/sensor/wulan";
extern String callBackPayload; // Variabel untuk menerima Payload dari callback
extern String callBackTopic; // Variabel untuk menerima Topic dari callback
EdspertPubSub clientMQTT;

//===== OLED LCD Declaration ======//
#define SCREEN_WIDTH 128 // OLED displays width, in pixles
#define SCREEN_HEIGHT 64 // OLED display hegight, in pixels

// Decdlaration for SSD1306 display connected to I2C (SDA< SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

//====== SHT Declaration ======//
HardwareSerial serial(2);
Edspert_sht20 sht20(&serial, 9600, 16, 17);

//====== LDR Declaration ======//
#define pinLDR 35
LDR ldr(pinLDR);

//====== Soil Moisture Declaration ======//
#define pinSOIL 34

//====== Distance Sensor ======//
#define ECHOPIN 13
#define TRIGPIN 12

float temperature, humidity, intensitas, soilMoisturePercent, distance;



//======  Relay Declaration  ======//
#define RELAY 4

//======  Buzzer Declaration  ======//
#define BUZZER 27

String TopicSub = "edspert/data/pump/wulan";
unsigned long previousMillis = 0; // Waktu sejak terakhir kali melakukan sesuatu
const long interval = 5000;  // Interval yg diinginkan dalam milidetik (3 detik)
float fltCallBackPayload = 0;


void setup() {
  Serial.begin(115200);
  splashScreenOled();
  sht20.begin();
  ldr.begin();
  initDistanceSensor();
  pinMode(RELAY, OUTPUT);
  pinMode(BUZZER, OUTPUT);

  digitalWrite(RELAY, LOW); // memastikan pompa mati saat awal program

  clientMQTT.connect_to_AP(ssid, password);
  clientMQTT.init_to_broker(mqttServer, mqttPort);
  clientMQTT.connect_to_broker(myClientID, MQTTUser, MQTTPass);
  clientMQTT.mqtt_subscribe(TopicSub);
}

void loop() {
 clientMQTT.rxMessFrBroker();
 if(callBackTopic == TopicSub){
  fltCallBackPayload = callBackPayload.toFloat();
 }

  unsigned long currentMillis = millis();
  if(currentMillis - previousMillis >= interval){
    // Read sensor
    temperature = sht20.readTemperature();
    humidity = sht20.readHumidity();
    intensitas = ldr.readIntensitas();
    soilMoisturePercent = readSoilMoisture();
    distance = readDistance();

    // Convert to JSON
    doc["temp"] = temperature;
    doc["hum"] = humidity;
    doc["inten"] = intensitas;
    doc["soil"] = soilMoisturePercent;
    doc["distan"] = distance;

    // Serializasikan objek JSON ke dalam string JSON
    jsonPayload = ""; // Riset Payload jsonPayload
    serializeJson(doc, jsonPayload);
    clientMQTT.mqtt_publish(Topic, String(jsonPayload));

    displayMeassuring(temperature, humidity, intensitas, soilMoisturePercent, distance);
    display.clearDisplay();
    previousMillis = currentMillis;
  }
  else{
    // Action
    if(distance > 50){
      digitalWrite(BUZZER, HIGH);
    }
    else{
      digitalWrite(BUZZER, LOW);
    }
    // Action based on soil moisture
    if(soilMoisturePercent < 40 || fltCallBackPayload == 1){
      //mengubah nilai relay kebalikannya
      digitalWrite(RELAY, HIGH); 
    }
    else{
      //mengubah nilai relay kebalikannya
      digitalWrite(RELAY, LOW);
    }
  }
}

float readSoilMoisture(){ // sensor 1 Soil
  int soil = analogRead(pinSOIL);
  float soilMoisture = map(soil, 4095, 0, 0, 100);
  return soilMoisture;
}

void initDistanceSensor(){ // sensor 2 Distan
  pinMode(ECHOPIN, INPUT_PULLUP);
  pinMode(TRIGPIN, OUTPUT);
  digitalWrite(ECHOPIN, HIGH);
}

float readDistance(){ // sensor 2 Distan
  digitalWrite(TRIGPIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGPIN, HIGH);
  delayMicroseconds(15);
  digitalWrite(TRIGPIN, LOW);
  float distance1 = pulseIn(ECHOPIN, HIGH, 26000);
  float ret_distance = distance1/58;
  return ret_distance;
}

void splashScreenOled(){ // output 3 OLED LCD SSD1306
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)){ // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(500);
  display.clearDisplay();

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(25, 20);
  display.println("EDSPERT"); // Display static text
  display.setCursor(20,40);
  display.println("BOOTCAMP");
  display.display();
  delay(5000);
  display.clearDisplay();
}

void displayMeassuring(float a, float b, float c, float d, float e){
  display.setTextSize(1.2);
  display.setTextColor(WHITE);
  display.setCursor(15, 5);
  display.println("Nilai Parameter"); // Display static text

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10, 18);
  display.print("Temp   : ");
  display.print(a);
  display.print(" ");
  display.print((char)247);
  display.println("C");

  display.setCursor(10, 27);
  display.print("Hum    : ");
  display.print(b);
  display.println(" %");

  display.setCursor(10, 36);
  display.print("Inten  : ");
  display.print(c);
  display.println(" Lx");

  display.setCursor(10, 45);
  display.print("Soil   : ");
  display.print(d);
  display.println(" %");

  display.setCursor(10, 54);
  display.print("Distan : ");
  display.print(e);
  display.println(" cm");

  display.display();
}













